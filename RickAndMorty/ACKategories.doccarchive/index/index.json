{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/gradientview\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"path":"\/documentation\/ackategories\/gradientview\/init(colors:axis:)","title":"init(colors: [UIColor], axis: NSLayoutConstraint.Axis)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/gradientview\/axis","title":"var axis: NSLayoutConstraint.Axis","type":"property"},{"path":"\/documentation\/ackategories\/gradientview\/colors","title":"var colors: [UIColor]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/gradientview\/traitcollectiondidchange(_:)","title":"func traitCollectionDidChange(UITraitCollection?)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/gradientview\/layerclass","title":"class var layerClass: Swift.AnyClass","type":"property"}],"path":"\/documentation\/ackategories\/gradientview","title":"GradientView","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/selfsizingtableheaderfooterview\/layoutsubviews()","title":"func layoutSubviews()","type":"method"}],"path":"\/documentation\/ackategories\/selfsizingtableheaderfooterview","title":"SelfSizingTableHeaderFooterView","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/taglistview\/init(frame:)","title":"init(frame: CGRect)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/taglistview\/horizontalspacing","title":"var horizontalSpacing: CGFloat","type":"property"},{"path":"\/documentation\/ackategories\/taglistview\/intrinsiccontentsize","title":"var intrinsicContentSize: CGSize","type":"property"},{"path":"\/documentation\/ackategories\/taglistview\/tagviews","title":"var tagViews: [UIView]","type":"property"},{"path":"\/documentation\/ackategories\/taglistview\/verticalspacing","title":"var verticalSpacing: CGFloat","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/taglistview\/layoutsubviews()","title":"func layoutSubviews()","type":"method"}],"path":"\/documentation\/ackategories\/taglistview","title":"TagListView","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/userdefault\/init(_:default:userdefaults:)","title":"init<Wrapped>(String, default: Wrapped?, userDefaults: UserDefaults)","type":"init"},{"path":"\/documentation\/ackategories\/userdefault\/init(_:default:userdefaults:errorlogger:)","title":"init(String, default: Value, userDefaults: UserDefaults, errorLogger: ((Error) -> Void)?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/userdefault\/projectedvalue","title":"var projectedValue: AnyPublisher<Value, Never>","type":"property"},{"path":"\/documentation\/ackategories\/userdefault\/wrappedvalue","title":"var wrappedValue: Value","type":"property"}],"path":"\/documentation\/ackategories\/userdefault","title":"UserDefault","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/frontmostcontainerviewcontroller\/frontmostchild","title":"var frontmostChild: UIViewController?","type":"property"}],"path":"\/documentation\/ackategories\/frontmostcontainerviewcontroller","title":"FrontmostContainerViewController","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/ackategories\/optionalprotocol\/wrappedvalue","title":"WrappedValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/optionalprotocol\/optional","title":"var optional: WrappedValue?","type":"property"}],"path":"\/documentation\/ackategories\/optionalprotocol","title":"OptionalProtocol","type":"protocol"},{"path":"\/documentation\/ackategories\/propertylistvalue","title":"PropertyListValue","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/randomizable\/random()","title":"static func random() -> Self","type":"method"}],"path":"\/documentation\/ackategories\/randomizable","title":"Randomizable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/reusable\/reuseidentifier","title":"static var reuseIdentifier: String","type":"property"}],"path":"\/documentation\/ackategories\/reusable","title":"Reusable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uicontroleventhandling\/off(_:)","title":"func off(UIControl.Event)","type":"method"},{"path":"\/documentation\/ackategories\/uicontroleventhandling\/on(_:handler:)","title":"func on(UIControl.Event, handler: (Self) -> Void)","type":"method"},{"path":"\/documentation\/ackategories\/uicontroleventhandling\/on(handler:)","title":"func on(handler: (Self) -> Void)","type":"method"}],"path":"\/documentation\/ackategories\/uicontroleventhandling","title":"UIControlEventHandling","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/betterurl\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/ackategories\/betterurl\/init(url:)","title":"init(url: URL)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/betterurl\/rawvalue","title":"let rawValue: String","type":"property"},{"path":"\/documentation\/ackategories\/betterurl\/url","title":"let url: URL","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/ackategories\/betterurl\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/ackategories\/betterurl\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/betterurl\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/betterurl\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/betterurl\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/ackategories\/betterurl\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/ackategories\/betterurl\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/betterurl","title":"BetterURL","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/logger\/applog()","title":"static func appLog() -> OSLog","type":"method"},{"path":"\/documentation\/ackategories\/logger\/lifecyclelog()","title":"static func lifecycleLog() -> OSLog","type":"method"},{"path":"\/documentation\/ackategories\/logger\/networkinglog()","title":"static func networkingLog() -> OSLog","type":"method"},{"path":"\/documentation\/ackategories\/logger\/oslog(subsystem:category:)","title":"static func osLog(subsystem: String, category: String) -> OSLog","type":"method"}],"path":"\/documentation\/ackategories\/logger","title":"Logger","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/loggercategory\/app","title":"static var app: String","type":"property"},{"path":"\/documentation\/ackategories\/loggercategory\/lifecycle","title":"static var lifecycle: String","type":"property"},{"path":"\/documentation\/ackategories\/loggercategory\/networking","title":"static var networking: String","type":"property"}],"path":"\/documentation\/ackategories\/loggercategory","title":"LoggerCategory","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/ackategories\/+(_:_:)","title":"func + <Key, Value>([Key : Value], [Key : Value]) -> [Key : Value]","type":"op"},{"path":"\/documentation\/ackategories\/=_(_:_:)-5f35k","title":"func =? <T>(inout T, T?)","type":"op"},{"path":"\/documentation\/ackategories\/=_(_:_:)-6lj31","title":"func =? <T>(inout T?, T?)","type":"op"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/activechild","title":"var activeChild: FlowCoordinator?","type":"property"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/childcoordinators","title":"var childCoordinators: [Base.FlowCoordinator<DeepLinkType>]","type":"property"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/navigationcontroller","title":"var navigationController: UINavigationController?","type":"property"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/parentcoordinator","title":"var parentCoordinator: FlowCoordinator?","type":"property"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/rootviewcontroller","title":"var rootViewController: UIViewController!","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/addchild(_:)","title":"func addChild(FlowCoordinator)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/handledeeplink(_:)","title":"func handleDeeplink(DeepLinkType) -> Bool","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/navigationcontroller(_:animationcontrollerfor:from:to:)","title":"func navigationController(UINavigationController, animationControllerFor: UINavigationController.Operation, from: UIViewController, to: UIViewController) -> UIViewControllerAnimatedTransitioning?","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/navigationcontroller(_:didshow:animated:)","title":"func navigationController(UINavigationController, didShow: UIViewController, animated: Bool)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/navigationcontroller(_:interactioncontrollerfor:)","title":"func navigationController(UINavigationController, interactionControllerFor: UIViewControllerAnimatedTransitioning) -> UIViewControllerInteractiveTransitioning?","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/presentationcontrollerdiddismiss(_:)","title":"func presentationControllerDidDismiss(UIPresentationController)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/removechild(_:)","title":"func removeChild(FlowCoordinator)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/start()","title":"func start() -> UIViewController","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/start(from:)","title":"func start(from: UIViewController)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/start(in:)","title":"func start(in: UIWindow)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/start(with:)","title":"func start(with: UINavigationController)","type":"method"},{"path":"\/documentation\/ackategories\/base\/flowcoordinator\/stop(animated:completion:)","title":"func stop(animated: Bool, completion: (() -> Void)?)","type":"method"}],"path":"\/documentation\/ackategories\/base\/flowcoordinator","title":"Base.FlowCoordinator","type":"class"},{"path":"\/documentation\/ackategories\/base\/flowcoordinatornodeeplink","title":"Base.FlowCoordinatorNoDeepLink","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/init()","title":"init()","type":"init"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/init(coder:)","title":"init?(coder: NSCoder)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/hasnavigationbar","title":"var hasNavigationBar: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/viewdidappear(_:)","title":"func viewDidAppear(Bool)","type":"method"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/viewdidfirstappear(_:)","title":"func viewDidFirstAppear(Bool)","type":"method"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/viewwillappear(_:)","title":"func viewWillAppear(Bool)","type":"method"},{"path":"\/documentation\/ackategories\/base\/viewcontroller\/viewwillfirstappear(_:)","title":"func viewWillFirstAppear(Bool)","type":"method"}],"path":"\/documentation\/ackategories\/base\/viewcontroller","title":"Base.ViewController","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/viewmodel\/init()","title":"init()","type":"init"}],"path":"\/documentation\/ackategories\/base\/viewmodel","title":"Base.ViewModel","type":"class"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/flowcoordinatormemoryloggingenabled","title":"static var flowCoordinatorMemoryLoggingEnabled: Bool","type":"property"},{"path":"\/documentation\/ackategories\/base\/memoryloggingenabled","title":"static var memoryLoggingEnabled: Bool","type":"property"},{"path":"\/documentation\/ackategories\/base\/viewcontrollermemoryloggingenabled","title":"static var viewControllerMemoryLoggingEnabled: Bool","type":"property"},{"path":"\/documentation\/ackategories\/base\/viewmodelmemoryloggingenabled","title":"static var viewModelMemoryLoggingEnabled: Bool","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"path":"\/documentation\/ackategories\/base\/nodeeplink","title":"Base.NoDeepLink","type":"enum"}],"path":"\/documentation\/ackategories\/base","title":"Base","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/errorhandlers\/rootviewcontrollerdeallocatedbeforestop","title":"static var rootViewControllerDeallocatedBeforeStop: (() -> Void)?","type":"property"}],"path":"\/documentation\/ackategories\/errorhandlers","title":"ErrorHandlers","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/future\/init(operation:)","title":"init(operation: () async throws -> Output)","type":"init"}],"path":"\/documentation\/ackategories\/combine\/future","title":"Future","type":"extension"},{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publisher\/flatmaplatest(_:)","title":"func flatMapLatest<T>((Self.Output) -> T) -> Publishers.SwitchToLatest<T, Publishers.Map<Self, T>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publisher\/weakassign(to:on:)","title":"func weakAssign<Root>(to: ReferenceWritableKeyPath<Root, Output>, on: Root) -> AnyCancellable","type":"method"}],"path":"\/documentation\/ackategories\/combine\/publisher","title":"Publisher","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/anypublisher\/init(operation:)","title":"init(operation: () async throws -> Output)","type":"init"}],"path":"\/documentation\/ackategories\/combine\/anypublisher","title":"AnyPublisher","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/init(_:)-277by","title":"init([Upstream])","type":"init"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/init(_:)-7ruqx","title":"init(Upstream...)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/receive(subscriber:)","title":"func receive<S>(subscriber: S)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/failure","title":"Publishers.ZipMany.Failure","type":"typealias"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/output","title":"Publishers.ZipMany.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/values-2oncf","title":"var values: AsyncPublisher<Self>","type":"property"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/values-3jyog","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:)-165xv","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:)-2mfbw","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:_:)-2sjo6","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:_:)-4kgni","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-3r0f7","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-3yqxm","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-5657v","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-5rgig","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmaplatest(_:)","title":"func flatMapLatest<T>((Self.Output) -> T) -> Publishers.SwitchToLatest<T, Publishers.Map<Self, T>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:)-4niae","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:)-wdlx","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/print(_:to:)","title":"func print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/subscribe(_:)-5dtaz","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/subscribe(_:)-cbwj","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/weakassign(to:on:)","title":"func weakAssign<Root>(to: ReferenceWritableKeyPath<Root, Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:)-4ukx2","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:)-6yeut","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:_:)-4lymq","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:_:)-6xqon","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/publisher-implementations","title":"Publisher Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/values-2oncf","title":"var values: AsyncPublisher<Self>","type":"property"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/values-3jyog","title":"var values: AsyncThrowingPublisher<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/allsatisfy(_:)","title":"func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/append(_:)","title":"func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/assertnofailure(_:file:line:)","title":"func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/assign(to:)","title":"func assign(to: inout Published<Self.Output>.Publisher)","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/assign(to:on:)","title":"func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/breakpoint(receivesubscription:receiveoutput:receivecompletion:)","title":"func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/breakpointonerror()","title":"func breakpointOnError() -> Publishers.Breakpoint<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/buffer(size:prefetch:whenfull:)","title":"func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/catch(_:)","title":"func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/collect()","title":"func collect() -> Publishers.Collect<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/collect(_:)","title":"func collect(Int) -> Publishers.CollectByCount<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/collect(_:options:)","title":"func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:)","title":"func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:)-165xv","title":"func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:)-2mfbw","title":"func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:_:)-2sjo6","title":"func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:_:)-4kgni","title":"func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/combinelatest(_:_:_:_:)","title":"func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/compactmap(_:)","title":"func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/contains(_:)","title":"func contains(Self.Output) -> Publishers.Contains<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/contains(where:)","title":"func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/count()","title":"func count() -> Publishers.Count<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/debounce(for:scheduler:options:)","title":"func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/decode(type:decoder:)","title":"func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/delay(for:tolerance:scheduler:options:)","title":"func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/drop(untiloutputfrom:)","title":"func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/drop(while:)","title":"func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/dropfirst(_:)","title":"func dropFirst(Int) -> Publishers.Drop<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/encode(encoder:)","title":"func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/erasetoanypublisher()","title":"func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/filter(_:)","title":"func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/first()","title":"func first() -> Publishers.First<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/first(where:)","title":"func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-3r0f7","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<Publishers.SetFailureType<P, Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-3yqxm","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-5657v","title":"func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmap(maxpublishers:_:)-5rgig","title":"func flatMap<P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Publishers.SetFailureType<Self, P.Failure>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/flatmaplatest(_:)","title":"func flatMapLatest<T>((Self.Output) -> T) -> Publishers.SwitchToLatest<T, Publishers.Map<Self, T>>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/handleevents(receivesubscription:receiveoutput:receivecompletion:receivecancel:receiverequest:)","title":"func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/ignoreoutput()","title":"func ignoreOutput() -> Publishers.IgnoreOutput<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/last()","title":"func last() -> Publishers.Last<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/last(where:)","title":"func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/makeconnectable()","title":"func makeConnectable() -> Publishers.MakeConnectable<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:)-4niae","title":"func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:)-wdlx","title":"func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:_:)","title":"func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/map(_:_:_:)","title":"func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/maperror(_:)","title":"func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/max(by:)","title":"func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/measureinterval(using:options:)","title":"func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:)","title":"func merge(with: Self) -> Publishers.MergeMany<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:)","title":"func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:)","title":"func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:)","title":"func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:_:)","title":"func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/merge(with:_:_:_:_:_:_:)","title":"func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/min(by:)","title":"func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/multicast(_:)","title":"func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/multicast(subject:)","title":"func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/output(at:)","title":"func output(at: Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/output(in:)","title":"func output<R>(in: R) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prefix(_:)","title":"func prefix(Int) -> Publishers.Output<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prefix(untiloutputfrom:)","title":"func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prefix(while:)","title":"func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/prepend(_:)","title":"func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/print(_:to:)","title":"func print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/receive(on:options:)","title":"func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/reduce(_:_:)","title":"func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/removeduplicates()","title":"func removeDuplicates() -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/removeduplicates(by:)","title":"func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/replaceempty(with:)","title":"func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/replaceerror(with:)","title":"func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/replacenil(with:)","title":"func replaceNil<T>(with: T) -> Publishers.Map<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/retry(_:)","title":"func retry(Int) -> Publishers.Retry<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/scan(_:_:)","title":"func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/setfailuretype(to:)","title":"func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/share()","title":"func share() -> Publishers.Share<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/sink(receivecompletion:receivevalue:)","title":"func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/sink(receivevalue:)","title":"func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/subscribe(_:)-5dtaz","title":"func subscribe<S>(S) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/subscribe(_:)-cbwj","title":"func subscribe<S>(S)","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/subscribe(on:options:)","title":"func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/throttle(for:scheduler:latest:)","title":"func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/timeout(_:scheduler:options:customerror:)","title":"func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryallsatisfy(_:)","title":"func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trycatch(_:)","title":"func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trycompactmap(_:)","title":"func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trycontains(where:)","title":"func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trydrop(while:)","title":"func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryfilter(_:)","title":"func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryfirst(where:)","title":"func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trylast(where:)","title":"func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trymap(_:)","title":"func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trymax(by:)","title":"func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/trymin(by:)","title":"func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryprefix(while:)","title":"func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryreduce(_:_:)","title":"func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryremoveduplicates(by:)","title":"func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/tryscan(_:_:)","title":"func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/weakassign(to:on:)","title":"func weakAssign<Root>(to: ReferenceWritableKeyPath<Root, Output>, on: Root) -> AnyCancellable","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:)","title":"func zip<P>(P) -> Publishers.Zip<Self, P>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:)-4ukx2","title":"func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:)-6yeut","title":"func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:_:)-4lymq","title":"func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:_:)-6xqon","title":"func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>","type":"method"},{"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/zip(_:_:_:_:)","title":"func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>","type":"method"}],"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany\/publisher-implementations","title":"Publisher Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/combine\/publishers\/zipmany","title":"Publishers.ZipMany","type":"struct"}],"path":"\/documentation\/ackategories\/combine\/publishers","title":"Publishers","type":"extension"}],"path":"\/documentation\/ackategories\/combine","title":"Combine","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/bundle\/buildnumber","title":"var buildNumber: Int?","type":"property"},{"path":"\/documentation\/ackategories\/foundation\/bundle\/receiptdata","title":"var receiptData: Data?","type":"property"},{"path":"\/documentation\/ackategories\/foundation\/bundle\/version","title":"var version: String?","type":"property"}],"path":"\/documentation\/ackategories\/foundation\/bundle","title":"Bundle","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/dateformatter\/cached(for:)","title":"static func cached(for: String) -> DateFormatter","type":"method"}],"path":"\/documentation\/ackategories\/foundation\/dateformatter","title":"DateFormatter","type":"extension"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/nsattributedstring\/+(_:_:)","title":"static func + (NSAttributedString, NSAttributedString) -> NSAttributedString","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/nsattributedstring\/byappending(_:)","title":"func byAppending(NSAttributedString) -> NSAttributedString","type":"method"}],"path":"\/documentation\/ackategories\/foundation\/nsattributedstring","title":"NSAttributedString","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/numberformatter\/string(from:)-42ny2","title":"func string(from: Int) -> String?","type":"method"},{"path":"\/documentation\/ackategories\/foundation\/numberformatter\/string(from:)-9amzr","title":"func string(from: Double) -> String?","type":"method"}],"path":"\/documentation\/ackategories\/foundation\/numberformatter","title":"NumberFormatter","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/userdefaults\/deviceid","title":"var deviceID: String","type":"property"}],"path":"\/documentation\/ackategories\/foundation\/userdefaults","title":"UserDefaults","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/date\/tostring(with:)","title":"func toString(with: String) -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/date\/random(min:max:)","title":"static func random(min: Int, max: Int) -> Date","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/foundation\/date\/random()","title":"static func random() -> Date","type":"method"}],"path":"\/documentation\/ackategories\/foundation\/date\/randomizable-implementations","title":"Randomizable Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/foundation\/date","title":"Date","type":"extension"}],"path":"\/documentation\/ackategories\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/mapkit\/mkmapview\/dequeueannotationview(for:type:)","title":"func dequeueAnnotationView<T>(for: MKAnnotation, type: T.Type) -> T","type":"method"}],"path":"\/documentation\/ackategories\/mapkit\/mkmapview","title":"MKMapView","type":"extension"}],"path":"\/documentation\/ackategories\/mapkit","title":"MapKit","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/collection\/isnotempty","title":"var isNotEmpty: Bool","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/collection\/subscript(safe:)-1uhro","title":"subscript(safe _: Index) -> Iterator.Element?","type":"subscript"},{"path":"\/documentation\/ackategories\/swift\/collection\/subscript(safe:)-412d7","title":"subscript(safe _: CountableRange<Index>) -> [Element]","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/collection\/random(min:max:)","title":"static func random(min: Int, max: Int) -> [Element]","type":"method"}],"path":"\/documentation\/ackategories\/swift\/collection","title":"Collection","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/array\/remove(object:)","title":"func remove(object: Element)","type":"method"}],"path":"\/documentation\/ackategories\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/dictionary\/nilsremoved","title":"var nilsRemoved: [Key : Value.WrappedValue]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/dictionary\/value(for:)","title":"func value<T>(for: String) -> T?","type":"method"}],"path":"\/documentation\/ackategories\/swift\/dictionary","title":"Dictionary","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/int\/init(safe:)-2x0yb","title":"init?(safe: Float)","type":"init"},{"path":"\/documentation\/ackategories\/swift\/int\/init(safe:)-47nf8","title":"init?(safe: CGFloat)","type":"init"},{"path":"\/documentation\/ackategories\/swift\/int\/init(safe:)-4ndg2","title":"init?(safe: Double)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/int\/random()","title":"static func random() -> Int","type":"method"}],"path":"\/documentation\/ackategories\/swift\/int\/randomizable-implementations","title":"Randomizable Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/swift\/int","title":"Int","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/string\/firstletter","title":"var firstLetter: String?","type":"property"},{"path":"\/documentation\/ackategories\/swift\/string\/isnumeric","title":"var isNumeric: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/string\/isvalidemail(regex:)","title":"func isValidEmail(regex: String) -> Bool","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/leftpadding(tolength:withpad:)","title":"func leftPadding(toLength: Int, withPad: Character) -> String","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/localized(comment:value:tablename:bundle:)","title":"func localized(comment: String, value: String, tableName: String?, bundle: Bundle) -> String","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/matchesregex(_:)","title":"func matchesRegex(String) -> Bool","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/normalized()","title":"func normalized() -> String","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/removingdiacritics(_:)","title":"func removingDiacritics(Locale) -> String","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/trimmed(characterset:from:)","title":"func trimmed(characterSet: CharacterSet, from: Side) -> String","type":"method"},{"path":"\/documentation\/ackategories\/swift\/string\/trimmed(charactersin:from:)","title":"func trimmed(charactersIn: String, from: Side) -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/string\/random(minlength:maxlength:allowedcharacters:)","title":"static func random(minLength: Int, maxLength: Int, allowedCharacters: String) -> String","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/string\/side\/both","title":"case both","type":"case"},{"path":"\/documentation\/ackategories\/swift\/string\/side\/leading","title":"case leading","type":"case"},{"path":"\/documentation\/ackategories\/swift\/string\/side\/trailing","title":"case trailing","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/string\/side\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/ackategories\/swift\/string\/side\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/swift\/string\/side","title":"String.Side","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/string\/random()","title":"static func random() -> String","type":"method"}],"path":"\/documentation\/ackategories\/swift\/string\/randomizable-implementations","title":"Randomizable Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/swift\/string","title":"String","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/optional\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/ackategories\/swift\/optional\/isnotempty","title":"var isNotEmpty: Bool","type":"property"},{"path":"\/documentation\/ackategories\/swift\/optional\/nonempty","title":"var nonEmpty: Wrapped?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/optional\/optional","title":"var optional: WrappedValue?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swift\/optional\/wrappedvalue","title":"Optional.WrappedValue","type":"typealias"}],"path":"\/documentation\/ackategories\/swift\/optional\/optionalprotocol-implementations","title":"OptionalProtocol Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/ackategories\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swiftui\/view\/font(_:lineheight:textstyle:)","title":"func font(UIFont, lineHeight: Double, textStyle: Font.TextStyle?) -> some View","type":"method"}],"path":"\/documentation\/ackategories\/swiftui\/view","title":"View","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swiftui\/edgeinsets\/init(_:)","title":"init(CGFloat)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/swiftui\/edgeinsets\/zero","title":"static var zero: `Self`","type":"property"}],"path":"\/documentation\/ackategories\/swiftui\/edgeinsets","title":"EdgeInsets","type":"extension"}],"path":"\/documentation\/ackategories\/swiftui","title":"SwiftUI","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/nsmutableparagraphstyle\/init(lineheight:)","title":"init(lineHeight: CGFloat)","type":"init"}],"path":"\/documentation\/ackategories\/uikit\/nsmutableparagraphstyle","title":"NSMutableParagraphStyle","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uiapplication\/clearlaunchscreencache()","title":"func clearLaunchScreenCache()","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uiapplication","title":"UIApplication","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uibutton\/intrinsiccontentsize","title":"var intrinsicContentSize: CGSize","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uibutton\/centervertically(padding:)","title":"func centerVertically(padding: CGFloat)","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uibutton","title":"UIButton","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicollectionview\/dequeuecell(for:type:)","title":"func dequeueCell<T>(for: IndexPath, type: T.Type) -> T","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicollectionview\/dequeuesupplementaryview(ofkind:for:type:)","title":"func dequeueSupplementaryView<T>(ofKind: String, for: IndexPath, type: T.Type) -> T","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicollectionview\/prototypecell(type:)","title":"func prototypeCell<T>(type: T.Type) -> T","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicollectionview\/prototypesupplementaryview(ofkind:type:)","title":"func prototypeSupplementaryView<T>(ofKind: String, type: T.Type) -> T","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uicollectionview","title":"UICollectionView","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/init(hex:)","title":"init(hex: UInt32)","type":"init"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/init(hexstring:)","title":"init(hexString: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/hexstring","title":"var hexString: String?","type":"property"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/isdark","title":"var isDark: Bool","type":"property"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/islight","title":"var isLight: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/brightened(by:)","title":"func brightened(by: CGFloat) -> UIColor","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/darkened(by:)","title":"func darkened(by: CGFloat) -> UIColor","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/image(of:)","title":"func image(of: CGSize) -> UIImage","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicolor\/random()","title":"static func random() -> UIColor","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uicolor","title":"UIColor","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicontrol\/event\/touchendevents","title":"static let touchEndEvents: UIControl.Event","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uicontrol\/event","title":"UIControl.Event","type":"extension"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uicontrol\/off(_:)","title":"func off(UIControl.Event)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicontrol\/on(_:handler:)","title":"func on(UIControl.Event, handler: (Self) -> Void)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uicontrol\/on(handler:)","title":"func on(handler: (Self) -> Void)","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uicontrol\/uicontroleventhandling-implementations","title":"UIControlEventHandling Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/uikit\/uicontrol","title":"UIControl","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uidevice\/ismac","title":"var isMac: Bool","type":"property"},{"path":"\/documentation\/ackategories\/uikit\/uidevice\/ispad","title":"var isPad: Bool","type":"property"},{"path":"\/documentation\/ackategories\/uikit\/uidevice\/istv","title":"var isTV: Bool","type":"property"},{"path":"\/documentation\/ackategories\/uikit\/uidevice\/modelname","title":"var modelName: String","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uidevice","title":"UIDevice","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uiimage\/fixedorientation()","title":"func fixedOrientation() -> UIImage","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uiimage\/resized(maxdimension:)","title":"func resized(maxDimension: CGFloat) -> UIImage?","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uiimage","title":"UIImage","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uilabel\/fontsize","title":"var fontSize: CGFloat","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uilabel","title":"UILabel","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/poptorootviewcontroller(animated:completion:)","title":"func popToRootViewController(animated: Bool, completion: () -> Void)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/poptoviewcontroller(_:animated:completion:)","title":"func popToViewController(UIViewController, animated: Bool, completion: () -> Void)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/popviewcontroller(animated:completion:)","title":"func popViewController(animated: Bool, completion: () -> Void)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/pushviewcontroller(_:animated:completion:)","title":"func pushViewController(UIViewController, animated: Bool, completion: () -> Void)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/setupcustombackgesturedelegate()","title":"func setupCustomBackGestureDelegate()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/frontmostchild","title":"var frontmostChild: UIViewController?","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller\/frontmostcontainerviewcontroller-implementations","title":"FrontmostContainerViewController Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/uikit\/uinavigationcontroller","title":"UINavigationController","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uisearchbar\/textfield","title":"var textField: UITextField!","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uisearchbar","title":"UISearchBar","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uisplitviewcontroller\/frontmostchild","title":"var frontmostChild: UIViewController?","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uisplitviewcontroller\/frontmostcontainerviewcontroller-implementations","title":"FrontmostContainerViewController Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/uikit\/uisplitviewcontroller","title":"UISplitViewController","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uistackview\/removeallarrangedsubviews()","title":"func removeAllArrangedSubviews()","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uistackview","title":"UIStackView","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uitabbarcontroller\/frontmostchild","title":"var frontmostChild: UIViewController?","type":"property"}],"path":"\/documentation\/ackategories\/uikit\/uitabbarcontroller\/frontmostcontainerviewcontroller-implementations","title":"FrontmostContainerViewController Implementations","type":"symbol"}],"path":"\/documentation\/ackategories\/uikit\/uitabbarcontroller","title":"UITabBarController","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uitableview\/dequeuecell(for:type:)","title":"func dequeueCell<T>(for: IndexPath, type: T.Type) -> T","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uitableview\/dequeueheaderfooterview(type:)","title":"func dequeueHeaderFooterView<T>(type: T.Type) -> T","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uitableview\/prototypecell(type:)","title":"func prototypeCell<T>(type: T.Type) -> T","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uitableview","title":"UITableView","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uiview\/createhspacer(_:priority:)","title":"func createHSpacer(CGFloat, priority: Float) -> UIView","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uiview\/createvspacer(_:priority:)","title":"func createVSpacer(CGFloat, priority: Float) -> UIView","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uiview\/forceintrinsic()","title":"func forceIntrinsic()","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uiview","title":"UIView","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uiviewcontroller\/frontmostcontroller","title":"var frontmostController: UIViewController","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/ackategories\/uikit\/uiviewcontroller\/display(childviewcontroller:in:)","title":"func display(childViewController: UIViewController, in: UIView?)","type":"method"},{"path":"\/documentation\/ackategories\/uikit\/uiviewcontroller\/remove(childviewcontroller:)","title":"func remove(childViewController: UIViewController)","type":"method"}],"path":"\/documentation\/ackategories\/uikit\/uiviewcontroller","title":"UIViewController","type":"extension"}],"path":"\/documentation\/ackategories\/uikit","title":"UIKit","type":"extension"}],"path":"\/documentation\/ackategories","title":"ACKategories","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}